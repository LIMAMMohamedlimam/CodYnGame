-- phpMyAdmin SQL Dump
-- version 5.2.1
-- https://www.phpmyadmin.net/
--
-- Host: 127.0.0.1:3306
-- Generation Time: May 26, 2024 at 08:57 PM
-- Server version: 8.0.34
-- PHP Version: 8.2.13

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `codyngame`
--

-- --------------------------------------------------------

--
-- Table structure for table `default_code`
--

DROP TABLE IF EXISTS `default_code`;
CREATE TABLE IF NOT EXISTS `default_code` (
  `id` int NOT NULL AUTO_INCREMENT,
  `problem_id` int DEFAULT NULL,
  `language` enum('C','PHP','Python','Java','JavaScript') DEFAULT NULL,
  `code` text,
  PRIMARY KEY (`id`),
  KEY `problem_id` (`problem_id`)
) ENGINE=InnoDB AUTO_INCREMENT=56 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

--
-- Dumping data for table `default_code`
--

INSERT INTO `default_code` (`id`, `problem_id`, `language`, `code`) VALUES
(1, 1, 'C', '#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <json-c/json.h>\r\n\r\nint* twoSum(int* nums, int numsSize, int target, int* returnSize) {\r\n    // your code here :\r\n}\r\n\r\nint main(int argc, char* argv[]) {\r\n    if (argc != 2) {\r\n        fprintf(stderr, \"Usage: %s \'<json_string>\'\\n\", argv[0]);\r\n        return 1;\r\n    }\r\n\r\n    const char* json_string = argv[1];\r\n    struct json_object* parsed_json;\r\n    struct json_object* nums_json;\r\n    struct json_object* target_json;\r\n\r\n    parsed_json = json_tokener_parse(json_string);\r\n    if (parsed_json == NULL) {\r\n        fprintf(stderr, \"Error parsing JSON string.\\n\");\r\n        return 1;\r\n    }\r\n\r\n    if (!json_object_object_get_ex(parsed_json, \"nums\", &nums_json) ||\r\n        !json_object_object_get_ex(parsed_json, \"target\", &target_json)) {\r\n        fprintf(stderr, \"Error extracting JSON data.\\n\");\r\n        json_object_put(parsed_json);  // Free JSON object\r\n        return 1;\r\n    }\r\n\r\n    int numsSize = json_object_array_length(nums_json);\r\n    int nums[numsSize];\r\n    for (int i = 0; i < numsSize; i++) {\r\n        nums[i] = json_object_get_int(json_object_array_get_idx(nums_json, i));\r\n    }\r\n    int target = json_object_get_int(target_json);\r\n\r\n    int returnSize;\r\n    int* result = twoSum(nums, numsSize, target, &returnSize);\r\n\r\n    struct json_object* result_json = json_object_new_object();\r\n    if (result != NULL) {\r\n        struct json_object* indices_json = json_object_new_array();\r\n        json_object_array_add(indices_json, json_object_new_int(result[0]));\r\n        json_object_array_add(indices_json, json_object_new_int(result[1]));\r\n        json_object_object_add(result_json, \"indices\", indices_json);\r\n        free(result);\r\n    } else {\r\n        json_object_object_add(result_json, \"error\", json_object_new_string(\"No solution found\"));\r\n    }\r\n\r\n    printf(\"%s\\n\", json_object_to_json_string(result_json));\r\n    json_object_put(result_json);  // Free JSON object\r\n    json_object_put(parsed_json);  // Free JSON object\r\n\r\n    return 0;\r\n}\r\n'),
(2, 1, 'PHP', '<?php\r\nfunction twoSum($nums, $target) {\r\n    // your code here :\r\n}\r\n\r\nif ($argc != 2) {\r\n    fwrite(STDERR, \"Usage: php \" . $argv[0] . \" \'<json_string>\'\\n\");\r\n    exit(1);\r\n}\r\n\r\n$json_string = $argv[1];\r\n$data = json_decode($json_string, true);\r\n\r\nif ($data === null || !isset($data[\'nums\']) || !isset($data[\'target\'])) {\r\n    fwrite(STDERR, \"Error extracting JSON data.\\n\");\r\n    exit(1);\r\n}\r\n\r\n$nums = $data[\'nums\'];\r\n$target = $data[\'target\'];\r\n\r\n$result = twoSum($nums, $target);\r\nif ($result !== null) {\r\n    echo json_encode([\"indices\" => $result]) . \"\\n\";\r\n} else {\r\n    echo json_encode([\"error\" => \"No solution found\"]) . \"\\n\";\r\n}\r\n?>\r\n'),
(3, 1, 'Python', 'import json\r\nimport sys\r\n\r\ndef two_sum(nums, target):\r\n    # your code here :\r\n    pass\r\n\r\nif len(sys.argv) != 2:\r\n    print(f\"Usage: {sys.argv[0]} \'<json_string>\'\", file=sys.stderr)\r\n    sys.exit(1)\r\n\r\njson_string = sys.argv[1]\r\ndata = json.loads(json_string)\r\n\r\nnums = data.get(\'nums\')\r\ntarget = data.get(\'target\')\r\n\r\nif nums is None or target is None:\r\n    print(\"Error extracting JSON data.\", file=sys.stderr)\r\n    sys.exit(1)\r\n\r\nresult = two_sum(nums, target)\r\nif result is not None:\r\n    print(json.dumps({\"indices\": result}))\r\nelse:\r\n    print(json.dumps({\"error\": \"No solution found\"}))\r\n'),
(4, 1, 'Java', 'import org.json.JSONArray;\r\nimport org.json.JSONObject;\r\n\r\npublic class TwoSum {\r\n    public static void main(String[] args) {\r\n        if (args.length != 1) {\r\n            System.err.println(\"Usage: java TwoSum \'<json_string>\'\");\r\n            System.exit(1);\r\n        }\r\n\r\n        String jsonString = args[0];\r\n        JSONObject jsonObject = new JSONObject(jsonString);\r\n        JSONArray numsJson = jsonObject.getJSONArray(\"nums\");\r\n        int target = jsonObject.getInt(\"target\");\r\n\r\n        int[] nums = new int[numsJson.length()];\r\n        for (int i = 0; i < numsJson.length(); i++) {\r\n            nums[i] = numsJson.getInt(i);\r\n        }\r\n\r\n        int[] result = twoSum(nums, target);\r\n        JSONObject resultJson = new JSONObject();\r\n\r\n        if (result != null) {\r\n            JSONArray indicesJson = new JSONArray();\r\n            indicesJson.put(result[0]);\r\n            indicesJson.put(result[1]);\r\n            resultJson.put(\"indices\", indicesJson);\r\n        } else {\r\n            resultJson.put(\"error\", \"No solution found\");\r\n        }\r\n\r\n        System.out.println(resultJson.toString());\r\n    }\r\n\r\n    public static int[] twoSum(int[] nums, int target) {\r\n        // your code here :\r\n        return null;\r\n    }\r\n}\r\n'),
(5, 1, 'JavaScript', 'function twoSum(nums, target) {\r\n    // your code here :\r\n}\r\n\r\nconst input = process.argv[2];\r\nif (!input) {\r\n    console.error(\"Usage: node script.js \'<json_string>\'\");\r\n    process.exit(1);\r\n}\r\n\r\nconst data = JSON.parse(input);\r\nconst nums = data.nums;\r\nconst target = data.target;\r\n\r\nif (!nums || target === undefined) {\r\n    console.error(\"Error extracting JSON data.\");\r\n    process.exit(1);\r\n}\r\n\r\nconst result = twoSum(nums, target);\r\nif (result !== null) {\r\n    console.log(JSON.stringify({ indices: result }));\r\n} else {\r\n    console.log(JSON.stringify({ error: \"No solution found\" }));\r\n}\r\n'),
(6, 2, 'C', '#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <string.h>\r\n#include <json-c/json.h>\r\n\r\nint lengthOfLongestSubstring(char* s) {\r\n    // input code here:\r\n    return 0;\r\n}\r\n\r\nint main(int argc, char* argv[]) {\r\n    if (argc != 2) {\r\n        fprintf(stderr, \"Usage: %s \'<json_string>\'\\n\", argv[0]);\r\n        return 1;\r\n    }\r\n\r\n    const char* json_string = argv[1];\r\n    struct json_object* parsed_json;\r\n    struct json_object* s_json;\r\n\r\n    parsed_json = json_tokener_parse(json_string);\r\n    if (parsed_json == NULL) {\r\n        fprintf(stderr, \"Error parsing JSON string.\\n\");\r\n        return 1;\r\n    }\r\n\r\n    if (!json_object_object_get_ex(parsed_json, \"s\", &s_json)) {\r\n        fprintf(stderr, \"Error extracting JSON data.\\n\");\r\n        json_object_put(parsed_json);  // Free JSON object\r\n        return 1;\r\n    }\r\n\r\n    const char* s = json_object_get_string(s_json);\r\n    int result = lengthOfLongestSubstring((char*)s);\r\n\r\n    struct json_object* result_json = json_object_new_object();\r\n    json_object_object_add(result_json, \"length\", json_object_new_int(result));\r\n    printf(\"%s\\n\", json_object_to_json_string(result_json));\r\n\r\n    json_object_put(result_json);  // Free JSON object\r\n    json_object_put(parsed_json);  // Free JSON object\r\n\r\n    return 0;\r\n}\r\n'),
(7, 2, 'PHP', '<?php\r\nfunction lengthOfLongestSubstring($s) {\r\n    // input code here:\r\n    return 0;\r\n}\r\n\r\nif ($argc != 2) {\r\n    fwrite(STDERR, \"Usage: php \" . $argv[0] . \" \'<json_string>\'\\n\");\r\n    exit(1);\r\n}\r\n\r\n$json_string = $argv[1];\r\n$data = json_decode($json_string, true);\r\n\r\nif ($data === null || !isset($data[\'s\'])) {\r\n    fwrite(STDERR, \"Error extracting JSON data.\\n\");\r\n    exit(1);\r\n}\r\n\r\n$s = $data[\'s\'];\r\n$result = lengthOfLongestSubstring($s);\r\n\r\necho json_encode([\"length\" => $result]) . \"\\n\";\r\n?>\r\n'),
(8, 2, 'Python', 'import json\r\nimport sys\r\n\r\ndef length_of_longest_substring(s):\r\n    # input code here:\r\n    return 0\r\n\r\nif len(sys.argv) != 2:\r\n    print(f\"Usage: {sys.argv[0]} \'<json_string>\'\", file=sys.stderr)\r\n    sys.exit(1)\r\n\r\njson_string = sys.argv[1]\r\ndata = json.loads(json_string)\r\n\r\ns = data.get(\'s\')\r\n\r\nif s is None:\r\n    print(\"Error extracting JSON data.\", file=sys.stderr)\r\n    sys.exit(1)\r\n\r\nresult = length_of_longest_substring(s)\r\nprint(json.dumps({\"length\": result}))\r\n'),
(9, 2, 'Java', 'import org.json.JSONObject;\r\n\r\npublic class LengthOfLongestSubstring {\r\n    public static void main(String[] args) {\r\n        if (args.length != 1) {\r\n            System.err.println(\"Usage: java LengthOfLongestSubstring \'<json_string>\'\");\r\n            System.exit(1);\r\n        }\r\n\r\n        String jsonString = args[0];\r\n        JSONObject jsonObject = new JSONObject(jsonString);\r\n        String s = jsonObject.getString(\"s\");\r\n\r\n        int result = lengthOfLongestSubstring(s);\r\n\r\n        JSONObject resultJson = new JSONObject();\r\n        resultJson.put(\"length\", result);\r\n        System.out.println(resultJson.toString());\r\n    }\r\n\r\n    public static int lengthOfLongestSubstring(String s) {\r\n        // input code here:\r\n        return 0;\r\n    }\r\n}\r\n'),
(10, 2, 'JavaScript', 'function lengthOfLongestSubstring(s) {\r\n    // input code here:\r\n    return 0;\r\n}\r\n\r\nconst input = process.argv[2];\r\nif (!input) {\r\n    console.error(\"Usage: node script.js \'<json_string>\'\");\r\n    process.exit(1);\r\n}\r\n\r\nconst data = JSON.parse(input);\r\nconst s = data.s;\r\n\r\nif (!s) {\r\n    console.error(\"Error extracting JSON data.\");\r\n    process.exit(1);\r\n}\r\n\r\nconst result = lengthOfLongestSubstring(s);\r\nconsole.log(JSON.stringify({ length: result }));\r\n'),
(11, 3, 'C', '#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <json-c/json.h>\r\n\r\nint calculate(int number1, int number2) {\r\n    // insert code here\r\n    return 0;\r\n}\r\n\r\nint main(int argc, char* argv[]) {\r\n    if (argc != 2) {\r\n        fprintf(stderr, \"Usage: %s \'<json_string>\'\\n\", argv[0]);\r\n        return 1;\r\n    }\r\n\r\n    const char* json_string = argv[1];\r\n    struct json_object* parsed_json;\r\n    struct json_object* number1_json;\r\n    struct json_object* number2_json;\r\n\r\n    parsed_json = json_tokener_parse(json_string);\r\n    if (parsed_json == NULL) {\r\n        fprintf(stderr, \"Error parsing JSON string.\\n\");\r\n        return 1;\r\n    }\r\n\r\n    if (!json_object_object_get_ex(parsed_json, \"number1\", &number1_json) ||\r\n        !json_object_object_get_ex(parsed_json, \"number2\", &number2_json)) {\r\n        fprintf(stderr, \"Error extracting JSON data.\\n\");\r\n        json_object_put(parsed_json);  // Free JSON object\r\n        return 1;\r\n    }\r\n\r\n    int number1 = json_object_get_int(number1_json);\r\n    int number2 = json_object_get_int(number2_json);\r\n\r\n    int result = calculate(number1, number2);\r\n\r\n    struct json_object* result_json = json_object_new_object();\r\n    json_object_object_add(result_json, \"result\", json_object_new_int(result));\r\n    printf(\"%s\\n\", json_object_to_json_string(result_json));\r\n\r\n    json_object_put(result_json);  // Free JSON object\r\n    json_object_put(parsed_json);  // Free JSON object\r\n\r\n    return 0;\r\n}\r\n'),
(12, 3, 'PHP', '<?php\r\nfunction calculate($number1, $number2) {\r\n    // insert code here\r\n    return 0;\r\n}\r\n\r\nif ($argc != 2) {\r\n    fwrite(STDERR, \"Usage: php \" . $argv[0] . \" \'<json_string>\'\\n\");\r\n    exit(1);\r\n}\r\n\r\n$json_string = $argv[1];\r\n$data = json_decode($json_string, true);\r\n\r\nif ($data === null || !isset($data[\'number1\']) || !isset($data[\'number2\'])) {\r\n    fwrite(STDERR, \"Error extracting JSON data.\\n\");\r\n    exit(1);\r\n}\r\n\r\n$number1 = $data[\'number1\'];\r\n$number2 = $data[\'number2\'];\r\n\r\n$result = calculate($number1, $number2);\r\n\r\necho json_encode([\"result\" => $result]) . \"\\n\";\r\n?>\r\n'),
(13, 3, 'Python', 'import json\r\nimport sys\r\n\r\ndef calculate(number1, number2):\r\n    # insert code here\r\n    return 0\r\n\r\nif len(sys.argv) != 2:\r\n    print(f\"Usage: {sys.argv[0]} \'<json_string>\'\", file=sys.stderr)\r\n    sys.exit(1)\r\n\r\njson_string = sys.argv[1]\r\ndata = json.loads(json_string)\r\n\r\nif \'number1\' not in data or \'number2\' not in data:\r\n    print(\"Error extracting JSON data.\", file=sys.stderr)\r\n    sys.exit(1)\r\n\r\nnumber1 = data[\'number1\']\r\nnumber2 = data[\'number2\']\r\n\r\nresult = calculate(number1, number2)\r\nprint(json.dumps({\"result\": result}))\r\n'),
(14, 3, 'Java', 'import org.json.JSONObject;\r\n\r\npublic class Calculate {\r\n    public static void main(String[] args) {\r\n        if (args.length != 1) {\r\n            System.err.println(\"Usage: java Calculate \'<json_string>\'\");\r\n            System.exit(1);\r\n        }\r\n\r\n        String jsonString = args[0];\r\n        JSONObject jsonObject = new JSONObject(jsonString);\r\n\r\n        if (!jsonObject.has(\"number1\") || !jsonObject.has(\"number2\")) {\r\n            System.err.println(\"Error extracting JSON data.\");\r\n            System.exit(1);\r\n        }\r\n\r\n        int number1 = jsonObject.getInt(\"number1\");\r\n        int number2 = jsonObject.getInt(\"number2\");\r\n\r\n        int result = calculate(number1, number2);\r\n\r\n        JSONObject resultJson = new JSONObject();\r\n        resultJson.put(\"result\", result);\r\n        System.out.println(resultJson.toString());\r\n    }\r\n\r\n    public static int calculate(int number1, int number2) {\r\n        // insert code here\r\n        return 0;\r\n    }\r\n}\r\n'),
(15, 3, 'JavaScript', 'function calculate(number1, number2) {\r\n    // insert code here\r\n    return 0;\r\n}\r\n\r\nconst input = process.argv[2];\r\nif (!input) {\r\n    console.error(\"Usage: node script.js \'<json_string>\'\");\r\n    process.exit(1);\r\n}\r\n\r\nconst data = JSON.parse(input);\r\n\r\nif (typeof data.number1 !== \'number\' || typeof data.number2 !== \'number\') {\r\n    console.error(\"Error extracting JSON data.\");\r\n    process.exit(1);\r\n}\r\n\r\nconst number1 = data.number1;\r\nconst number2 = data.number2;\r\n\r\nconst result = calculate(number1, number2);\r\nconsole.log(JSON.stringify({ result: result }));\r\n'),
(16, 4, 'C', '#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <limits.h>\r\n#include <json-c/json.h>\r\n\r\nint reverse(int x) {\r\n    // code here:\r\n    return 0;\r\n}\r\n\r\nint main(int argc, char* argv[]) {\r\n    if (argc != 2) {\r\n        fprintf(stderr, \"Usage: %s \'<json_string>\'\\n\", argv[0]);\r\n        return 1;\r\n    }\r\n\r\n    const char* json_string = argv[1];\r\n    struct json_object* parsed_json;\r\n    struct json_object* x_json;\r\n\r\n    parsed_json = json_tokener_parse(json_string);\r\n    if (parsed_json == NULL) {\r\n        fprintf(stderr, \"Error parsing JSON string.\\n\");\r\n        return 1;\r\n    }\r\n\r\n    if (!json_object_object_get_ex(parsed_json, \"x\", &x_json)) {\r\n        fprintf(stderr, \"Error extracting JSON data.\\n\");\r\n        json_object_put(parsed_json);  // Free JSON object\r\n        return 1;\r\n    }\r\n\r\n    int x = json_object_get_int(x_json);\r\n\r\n    int result = reverse(x);\r\n\r\n    struct json_object* result_json = json_object_new_object();\r\n    json_object_object_add(result_json, \"result\", json_object_new_int(result));\r\n    printf(\"%s\\n\", json_object_to_json_string(result_json));\r\n\r\n    json_object_put(result_json);  // Free JSON object\r\n    json_object_put(parsed_json);  // Free JSON object\r\n\r\n    return 0;\r\n}\r\n'),
(17, 4, 'PHP', '<?php\r\nfunction reverse($x) {\r\n    // code here:\r\n    return 0;\r\n}\r\n\r\nif ($argc != 2) {\r\n    fwrite(STDERR, \"Usage: php \" . $argv[0] . \" \'<json_string>\'\\n\");\r\n    exit(1);\r\n}\r\n\r\n$json_string = $argv[1];\r\n$data = json_decode($json_string, true);\r\n\r\nif ($data === null || !isset($data[\'x\'])) {\r\n    fwrite(STDERR, \"Error extracting JSON data.\\n\");\r\n    exit(1);\r\n}\r\n\r\n$x = $data[\'x\'];\r\n\r\n$result = reverse($x);\r\n\r\necho json_encode([\"result\" => $result]) . \"\\n\";\r\n?>\r\n'),
(18, 4, 'Python', 'import json\r\nimport sys\r\n\r\ndef reverse(x):\r\n    # code here:\r\n    return 0\r\n\r\nif len(sys.argv) != 2:\r\n    print(f\"Usage: {sys.argv[0]} \'<json_string>\'\", file=sys.stderr)\r\n    sys.exit(1)\r\n\r\njson_string = sys.argv[1]\r\ndata = json.loads(json_string)\r\n\r\nif \'x\' not in data:\r\n    print(\"Error extracting JSON data.\", file=sys.stderr)\r\n    sys.exit(1)\r\n\r\nx = data[\'x\']\r\n\r\nresult = reverse(x)\r\nprint(json.dumps({\"result\": result}))\r\n'),
(19, 4, 'Java', 'import org.json.JSONObject;\r\n\r\npublic class Reverse {\r\n    public static void main(String[] args) {\r\n        if (args.length != 1) {\r\n            System.err.println(\"Usage: java Reverse \'<json_string>\'\");\r\n            System.exit(1);\r\n        }\r\n\r\n        String jsonString = args[0];\r\n        JSONObject jsonObject = new JSONObject(jsonString);\r\n\r\n        if (!jsonObject.has(\"x\")) {\r\n            System.err.println(\"Error extracting JSON data.\");\r\n            System.exit(1);\r\n        }\r\n\r\n        int x = jsonObject.getInt(\"x\");\r\n\r\n        int result = reverse(x);\r\n\r\n        JSONObject resultJson = new JSONObject();\r\n        resultJson.put(\"result\", result);\r\n        System.out.println(resultJson.toString());\r\n    }\r\n\r\n    public static int reverse(int x) {\r\n        // code here:\r\n        return 0;\r\n    }\r\n}\r\n'),
(20, 4, 'JavaScript', 'function reverse(x) {\r\n    // code here:\r\n    return 0;\r\n}\r\n\r\nconst input = process.argv[2];\r\nif (!input) {\r\n    console.error(\"Usage: node script.js \'<json_string>\'\");\r\n    process.exit(1);\r\n}\r\n\r\nconst data = JSON.parse(input);\r\n\r\nif (typeof data.x !== \'number\') {\r\n    console.error(\"Error extracting JSON data.\");\r\n    process.exit(1);\r\n}\r\n\r\nconst x = data.x;\r\n\r\nconst result = reverse(x);\r\nconsole.log(JSON.stringify({ result: result }));\r\n'),
(21, 5, 'C', '#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <stdbool.h>\r\n#include <json-c/json.h>\r\n\r\nbool isPalindrome(int x) {\r\n    // your code here:\r\n    return false;\r\n}\r\n\r\nint main(int argc, char* argv[]) {\r\n    if (argc != 2) {\r\n        fprintf(stderr, \"Usage: %s \'<json_string>\'\\n\", argv[0]);\r\n        return 1;\r\n    }\r\n\r\n    const char* json_string = argv[1];\r\n    struct json_object* parsed_json;\r\n    struct json_object* num_json;\r\n\r\n    parsed_json = json_tokener_parse(json_string);\r\n    if (parsed_json == NULL) {\r\n        fprintf(stderr, \"Error parsing JSON string.\\n\");\r\n        return 1;\r\n    }\r\n\r\n    if (!json_object_object_get_ex(parsed_json, \"number\", &num_json)) {\r\n        fprintf(stderr, \"Error extracting JSON data.\\n\");\r\n        json_object_put(parsed_json);  // Free JSON object\r\n        return 1;\r\n    }\r\n\r\n    int x = json_object_get_int(num_json);\r\n\r\n    bool result = isPalindrome(x);\r\n\r\n    struct json_object* result_json = json_object_new_object();\r\n    json_object_object_add(result_json, \"isPalindrome\", json_object_new_boolean(result));\r\n    printf(\"%s\\n\", json_object_to_json_string(result_json));\r\n\r\n    json_object_put(result_json);  // Free JSON object\r\n    json_object_put(parsed_json);  // Free JSON object\r\n\r\n    return 0;\r\n}\r\n'),
(22, 5, 'PHP', '<?php\r\nfunction isPalindrome($x) {\r\n    // your code here:\r\n    return false;\r\n}\r\n\r\nif ($argc != 2) {\r\n    fwrite(STDERR, \"Usage: php \" . $argv[0] . \" \'<json_string>\'\\n\");\r\n    exit(1);\r\n}\r\n\r\n$json_string = $argv[1];\r\n$data = json_decode($json_string, true);\r\n\r\nif ($data === null || !isset($data[\'number\'])) {\r\n    fwrite(STDERR, \"Error extracting JSON data.\\n\");\r\n    exit(1);\r\n}\r\n\r\n$x = $data[\'number\'];\r\n\r\n$result = isPalindrome($x);\r\n\r\necho json_encode([\"isPalindrome\" => $result]) . \"\\n\";\r\n?>\r\n'),
(23, 5, 'Python', 'import json\r\nimport sys\r\n\r\ndef is_palindrome(x):\r\n    # your code here:\r\n    return False\r\n\r\nif len(sys.argv) != 2:\r\n    print(f\"Usage: {sys.argv[0]} \'<json_string>\'\", file=sys.stderr)\r\n    sys.exit(1)\r\n\r\njson_string = sys.argv[1]\r\ndata = json.loads(json_string)\r\n\r\nif \'number\' not in data:\r\n    print(\"Error extracting JSON data.\", file=sys.stderr)\r\n    sys.exit(1)\r\n\r\nx = data[\'number\']\r\n\r\nresult = is_palindrome(x)\r\nprint(json.dumps({\"isPalindrome\": result}))\r\n'),
(24, 5, 'Java', 'import org.json.JSONObject;\r\n\r\npublic class IsPalindrome {\r\n    public static void main(String[] args) {\r\n        if (args.length != 1) {\r\n            System.err.println(\"Usage: java IsPalindrome \'<json_string>\'\");\r\n            System.exit(1);\r\n        }\r\n\r\n        String jsonString = args[0];\r\n        JSONObject jsonObject = new JSONObject(jsonString);\r\n\r\n        if (!jsonObject.has(\"number\")) {\r\n            System.err.println(\"Error extracting JSON data.\");\r\n            System.exit(1);\r\n        }\r\n\r\n        int x = jsonObject.getInt(\"number\");\r\n\r\n        boolean result = isPalindrome(x);\r\n\r\n        JSONObject resultJson = new JSONObject();\r\n        resultJson.put(\"isPalindrome\", result);\r\n        System.out.println(resultJson.toString());\r\n    }\r\n\r\n    public static boolean isPalindrome(int x) {\r\n        // your code here:\r\n        return false;\r\n    }\r\n}\r\n'),
(25, 5, 'JavaScript', 'function isPalindrome(x) {\r\n    // your code here:\r\n    return false;\r\n}\r\n\r\nconst input = process.argv[2];\r\nif (!input) {\r\n    console.error(\"Usage: node script.js \'<json_string>\'\");\r\n    process.exit(1);\r\n}\r\n\r\nconst data = JSON.parse(input);\r\n\r\nif (typeof data.number !== \'number\') {\r\n    console.error(\"Error extracting JSON data.\");\r\n    process.exit(1);\r\n}\r\n\r\nconst x = data.number;\r\n\r\nconst result = isPalindrome(x);\r\nconsole.log(JSON.stringify({ isPalindrome: result }));\r\n'),
(26, 6, 'C', '#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <string.h>\r\n#include <json-c/json.h>\r\n\r\nint romanToInt(char *s) {\r\n    // code here\r\n    return 0;\r\n}\r\n\r\nint main(int argc, char* argv[]) {\r\n    if (argc != 2) {\r\n        fprintf(stderr, \"Usage: %s \'<roman_string>\'\\n\", argv[0]);\r\n        return 1;\r\n    }\r\n\r\n    char* s = argv[1];\r\n    int result = romanToInt(s);\r\n\r\n    struct json_object* result_json = json_object_new_object();\r\n    json_object_object_add(result_json, \"result\", json_object_new_int(result));\r\n    printf(\"%s\\n\", json_object_to_json_string(result_json));\r\n\r\n    json_object_put(result_json);  // Free JSON object\r\n\r\n    return 0;\r\n}\r\n'),
(27, 6, 'PHP', '<?php\r\nfunction romanToInt($s) {\r\n    // code here\r\n    return 0;\r\n}\r\n\r\nif ($argc != 2) {\r\n    fwrite(STDERR, \"Usage: php \" . $argv[0] . \" \'<roman_string>\'\\n\");\r\n    exit(1);\r\n}\r\n\r\n$s = $argv[1];\r\n$result = romanToInt($s);\r\n\r\necho json_encode([\"result\" => $result]) . \"\\n\";\r\n?>\r\n'),
(28, 6, 'Python', 'import json\r\nimport sys\r\n\r\ndef roman_to_int(s):\r\n    # code here\r\n    return 0\r\n\r\nif len(sys.argv) != 2:\r\n    print(f\"Usage: {sys.argv[0]} \'<roman_string>\'\", file=sys.stderr)\r\n    sys.exit(1)\r\n\r\ns = sys.argv[1]\r\nresult = roman_to_int(s)\r\nprint(json.dumps({\"result\": result}))\r\n'),
(29, 6, 'Java', 'import org.json.JSONObject;\r\n\r\npublic class RomanToInt {\r\n    public static void main(String[] args) {\r\n        if (args.length != 1) {\r\n            System.err.println(\"Usage: java RomanToInt \'<roman_string>\'\");\r\n            System.exit(1);\r\n        }\r\n\r\n        String s = args[0];\r\n\r\n        int result = romanToInt(s);\r\n\r\n        JSONObject resultJson = new JSONObject();\r\n        resultJson.put(\"result\", result);\r\n        System.out.println(resultJson.toString());\r\n    }\r\n\r\n    public static int romanToInt(String s) {\r\n        // code here\r\n        return 0;\r\n    }\r\n}\r\n'),
(30, 6, 'JavaScript', 'function romanToInt(s) {\r\n    // code here\r\n    return 0;\r\n}\r\n\r\nconst input = process.argv[2];\r\nif (!input) {\r\n    console.error(\"Usage: node script.js \'<roman_string>\'\");\r\n    process.exit(1);\r\n}\r\n\r\nconst s = input;\r\nconst result = romanToInt(s);\r\nconsole.log(JSON.stringify({ result: result }));\r\n'),
(31, 7, 'C', '#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <string.h>\r\n#include <json-c/json.h>\r\n\r\n#define MAX_SIZE 100\r\n\r\nint isValid(char *s) {\r\n   // code here\r\n   return 0;\r\n}\r\n\r\nint main(int argc, char* argv[]) {\r\n    if (argc != 2) {\r\n        fprintf(stderr, \"Usage: %s \'<json_string>\'\\n\", argv[0]);\r\n        return 1;\r\n    }\r\n\r\n    const char* json_string = argv[1];\r\n    struct json_object* parsed_json;\r\n    struct json_object* s_json;\r\n\r\n    parsed_json = json_tokener_parse(json_string);\r\n    if (parsed_json == NULL) {\r\n        fprintf(stderr, \"Error parsing JSON string.\\n\");\r\n        return 1;\r\n    }\r\n\r\n    if (!json_object_object_get_ex(parsed_json, \"input\", &s_json)) {\r\n        fprintf(stderr, \"Error extracting JSON data.\\n\");\r\n        json_object_put(parsed_json);  // Free JSON object\r\n        return 1;\r\n    }\r\n\r\n    const char* s = json_object_get_string(s_json);\r\n    int result = isValid((char*)s);\r\n\r\n    struct json_object* result_json = json_object_new_object();\r\n    json_object_object_add(result_json, \"isValid\", json_object_new_boolean(result));\r\n    printf(\"%s\\n\", json_object_to_json_string(result_json));\r\n\r\n    json_object_put(result_json);  // Free JSON object\r\n    json_object_put(parsed_json);  // Free JSON object\r\n\r\n    return 0;\r\n}\r\n'),
(32, 7, 'PHP', '<?php\r\nfunction isValid($s) {\r\n    // code here\r\n    return false;\r\n}\r\n\r\nif ($argc != 2) {\r\n    fwrite(STDERR, \"Usage: php \" . $argv[0] . \" \'<json_string>\'\\n\");\r\n    exit(1);\r\n}\r\n\r\n$json_string = $argv[1];\r\n$data = json_decode($json_string, true);\r\n\r\nif ($data === null || !isset($data[\'input\'])) {\r\n    fwrite(STDERR, \"Error extracting JSON data.\\n\");\r\n    exit(1);\r\n}\r\n\r\n$s = $data[\'input\'];\r\n$result = isValid($s);\r\n\r\necho json_encode([\"isValid\" => $result]) . \"\\n\";\r\n?>\r\n'),
(33, 7, 'Python', 'import json\r\nimport sys\r\n\r\ndef is_valid(s):\r\n    # code here\r\n    return False\r\n\r\nif len(sys.argv) != 2:\r\n    print(f\"Usage: {sys.argv[0]} \'<json_string>\'\", file=sys.stderr)\r\n    sys.exit(1)\r\n\r\njson_string = sys.argv[1]\r\ndata = json.loads(json_string)\r\n\r\nif \'input\' not in data:\r\n    print(\"Error extracting JSON data.\", file=sys.stderr)\r\n    sys.exit(1)\r\n\r\ns = data[\'input\']\r\nresult = is_valid(s)\r\nprint(json.dumps({\"isValid\": result}))\r\n'),
(34, 7, 'Java', 'import org.json.JSONObject;\r\n\r\npublic class IsValid {\r\n    public static void main(String[] args) {\r\n        if (args.length != 1) {\r\n            System.err.println(\"Usage: java IsValid \'<json_string>\'\");\r\n            System.exit(1);\r\n        }\r\n\r\n        String jsonString = args[0];\r\n        JSONObject jsonObject = new JSONObject(jsonString);\r\n\r\n        if (!jsonObject.has(\"input\")) {\r\n            System.err.println(\"Error extracting JSON data.\");\r\n            System.exit(1);\r\n        }\r\n\r\n        String s = jsonObject.getString(\"input\");\r\n\r\n        boolean result = isValid(s);\r\n\r\n        JSONObject resultJson = new JSONObject();\r\n        resultJson.put(\"isValid\", result);\r\n        System.out.println(resultJson.toString());\r\n    }\r\n\r\n    public static boolean isValid(String s) {\r\n        // code here\r\n        return false;\r\n    }\r\n}\r\n'),
(35, 7, 'JavaScript', 'function isValid(s) {\r\n    // code here\r\n    return false;\r\n}\r\n\r\nconst input = process.argv[2];\r\nif (!input) {\r\n    console.error(\"Usage: node script.js \'<json_string>\'\");\r\n    process.exit(1);\r\n}\r\n\r\nconst data = JSON.parse(input);\r\n\r\nif (typeof data.input !== \'string\') {\r\n    console.error(\"Error extracting JSON data.\");\r\n    process.exit(1);\r\n}\r\n\r\nconst s = data.input;\r\nconst result = isValid(s);\r\nconsole.log(JSON.stringify({ isValid: result }));\r\n'),
(36, 8, 'C', '#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <json-c/json.h>\r\n\r\nint maxArea(int* height, int heightSize) {\r\n    // code here\r\n    return 0;\r\n}\r\n\r\nint main(int argc, char* argv[]) {\r\n    if (argc < 2) {\r\n        fprintf(stderr, \"Usage: %s <height1> <height2> ... <heightN>\\n\", argv[0]);\r\n        return 1;\r\n    }\r\n\r\n    int height[argc - 1];\r\n    for (int i = 1; i < argc; i++) {\r\n        height[i - 1] = atoi(argv[i]);\r\n    }\r\n\r\n    int result = maxArea(height, argc - 1);\r\n\r\n    struct json_object* result_json = json_object_new_object();\r\n    json_object_object_add(result_json, \"maxArea\", json_object_new_int(result));\r\n    printf(\"%s\\n\", json_object_to_json_string(result_json));\r\n\r\n    json_object_put(result_json);  // Free JSON object\r\n\r\n    return 0;\r\n}\r\n'),
(37, 8, 'PHP', '<?php\r\nfunction maxArea($height) {\r\n    // code here\r\n    return 0;\r\n}\r\n\r\nif ($argc < 2) {\r\n    fwrite(STDERR, \"Usage: php \" . $argv[0] . \" <height1> <height2> ... <heightN>\\n\");\r\n    exit(1);\r\n}\r\n\r\n$height = array_map(\'intval\', array_slice($argv, 1));\r\n$result = maxArea($height);\r\n\r\necho json_encode([\"maxArea\" => $result]) . \"\\n\";\r\n?>\r\n'),
(38, 8, 'Python', 'import json\r\nimport sys\r\n\r\ndef max_area(height):\r\n    # code here\r\n    return 0\r\n\r\nif len(sys.argv) < 2:\r\n    print(f\"Usage: {sys.argv[0]} <height1> <height2> ... <heightN>\", file=sys.stderr)\r\n    sys.exit(1)\r\n\r\nheight = list(map(int, sys.argv[1:]))\r\nresult = max_area(height)\r\nprint(json.dumps({\"maxArea\": result}))\r\n'),
(39, 8, 'Java', 'import org.json.JSONObject;\r\n\r\npublic class MaxArea {\r\n    public static void main(String[] args) {\r\n        if (args.length < 1) {\r\n            System.err.println(\"Usage: java MaxArea <height1> <height2> ... <heightN>\");\r\n            System.exit(1);\r\n        }\r\n\r\n        int[] height = new int[args.length];\r\n        for (int i = 0; i < args.length; i++) {\r\n            height[i] = Integer.parseInt(args[i]);\r\n        }\r\n\r\n        int result = maxArea(height);\r\n\r\n        JSONObject resultJson = new JSONObject();\r\n        resultJson.put(\"maxArea\", result);\r\n        System.out.println(resultJson.toString());\r\n    }\r\n\r\n    public static int maxArea(int[] height) {\r\n        // code here\r\n        return 0;\r\n    }\r\n}\r\n'),
(40, 8, 'JavaScript', 'function maxArea(height) {\r\n    // code here\r\n    return 0;\r\n}\r\n\r\nconst input = process.argv.slice(2);\r\nif (input.length < 1) {\r\n    console.error(\"Usage: node script.js <height1> <height2> ... <heightN>\");\r\n    process.exit(1);\r\n}\r\n\r\nconst height = input.map(Number);\r\nconst result = maxArea(height);\r\nconsole.log(JSON.stringify({ maxArea: result }));\r\n'),
(41, 9, 'C', '#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <json-c/json.h>\r\n\r\ntypedef struct ListNode {\r\n    int val;\r\n    struct ListNode *next;\r\n} ListNode;\r\n\r\nListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\r\n    // your code here\r\n    return NULL;\r\n}\r\n\r\nint main(int argc, char* argv[]) {\r\n    if (argc != 2) {\r\n        fprintf(stderr, \"Usage: %s \'<json_data>\'\\n\", argv[0]);\r\n        return 1;\r\n    }\r\n\r\n    struct json_object *parsed_json = json_tokener_parse(argv[1]);\r\n    struct json_object *list1_json;\r\n    struct json_object *list2_json;\r\n\r\n    json_object_object_get_ex(parsed_json, \"list1\", &list1_json);\r\n    json_object_object_get_ex(parsed_json, \"list2\", &list2_json);\r\n\r\n    int list1_size = json_object_array_length(list1_json);\r\n    int list2_size = json_object_array_length(list2_json);\r\n\r\n    ListNode* l1 = NULL;\r\n    ListNode* l2 = NULL;\r\n    ListNode* temp;\r\n\r\n    for (int i = list1_size - 1; i >= 0; i--) {\r\n        temp = malloc(sizeof(ListNode));\r\n        temp->val = json_object_get_int(json_object_array_get_idx(list1_json, i));\r\n        temp->next = l1;\r\n        l1 = temp;\r\n    }\r\n\r\n    for (int i = list2_size - 1; i >= 0; i--) {\r\n        temp = malloc(sizeof(ListNode));\r\n        temp->val = json_object_get_int(json_object_array_get_idx(list2_json, i));\r\n        temp->next = l2;\r\n        l2 = temp;\r\n    }\r\n\r\n    ListNode* mergedList = mergeTwoLists(l1, l2);\r\n\r\n    struct json_object* result_json = json_object_new_array();\r\n    ListNode* current = mergedList;\r\n    while (current != NULL) {\r\n        json_object_array_add(result_json, json_object_new_int(current->val));\r\n        current = current->next;\r\n    }\r\n\r\n    printf(\"%s\\n\", json_object_to_json_string(result_json));\r\n\r\n    json_object_put(result_json);  // Free JSON object\r\n    json_object_put(parsed_json);  // Free JSON object\r\n\r\n    while (mergedList != NULL) {\r\n        temp = mergedList;\r\n        mergedList = mergedList->next;\r\n        free(temp);\r\n    }\r\n\r\n    return 0;\r\n}\r\n'),
(42, 9, 'PHP', '<?php\r\nclass ListNode {\r\n    public $val = 0;\r\n    public $next = null;\r\n\r\n    function __construct($val = 0, $next = null) {\r\n        $this->val = $val;\r\n        $this->next = $next;\r\n    }\r\n}\r\n\r\nfunction mergeTwoLists($l1, $l2) {\r\n    // your code here\r\n    return null;\r\n}\r\n\r\n$json_data = json_decode($argv[1]);\r\n\r\n$list1_json = $json_data->list1;\r\n$list2_json = $json_data->list2;\r\n\r\n$l1 = null;\r\nforeach (array_reverse($list1_json) as $val) {\r\n    $temp = new ListNode($val);\r\n    $temp->next = $l1;\r\n    $l1 = $temp;\r\n}\r\n\r\n$l2 = null;\r\nforeach (array_reverse($list2_json) as $val) {\r\n    $temp = new ListNode($val);\r\n    $temp->next = $l2;\r\n    $l2 = $temp;\r\n}\r\n\r\n$mergedList = mergeTwoLists($l1, $l2);\r\n\r\n$result = [];\r\n$current = $mergedList;\r\nwhile ($current != null) {\r\n    $result[] = $current->val;\r\n    $current = $current->next;\r\n}\r\n\r\necho json_encode($result) . \"\\n\";\r\n?>\r\n'),
(43, 9, 'Python', 'import json\r\nimport sys\r\n\r\nclass ListNode:\r\n    def __init__(self, val=0, next=None):\r\n        self.val = val\r\n        self.next = next\r\n\r\ndef mergeTwoLists(l1, l2):\r\n    # your code here\r\n    return None\r\n\r\ndata = json.loads(sys.argv[1])\r\n\r\nlist1_json = data[\'list1\']\r\nlist2_json = data[\'list2\']\r\n\r\nl1 = None\r\nfor val in reversed(list1_json):\r\n    temp = ListNode(val)\r\n    temp.next = l1\r\n    l1 = temp\r\n\r\nl2 = None\r\nfor val in reversed(list2_json):\r\n    temp = ListNode(val)\r\n    temp.next = l2\r\n    l2 = temp\r\n\r\nmergedList = mergeTwoLists(l1, l2)\r\n\r\nresult = []\r\ncurrent = mergedList\r\nwhile current:\r\n    result.append(current.val)\r\n    current = current.next\r\n\r\nprint(json.dumps(result))\r\n'),
(44, 9, 'Java', 'import org.json.JSONArray;\r\nimport org.json.JSONObject;\r\n\r\nclass MergeTwoLists {\r\n    static class ListNode {\r\n        int val;\r\n        ListNode next;\r\n\r\n        ListNode(int val) {\r\n            this.val = val;\r\n        }\r\n    }\r\n\r\n    public static ListNode mergeTwoLists(ListNode l1, ListNode l2) {\r\n        // your code here\r\n        return null;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        if (args.length != 1) {\r\n            System.err.println(\"Usage: java MergeTwoLists \'<json_data>\'\");\r\n            System.exit(1);\r\n        }\r\n\r\n        JSONObject jsonData = new JSONObject(args[0]);\r\n        JSONArray list1Json = jsonData.getJSONArray(\"list1\");\r\n        JSONArray list2Json = jsonData.getJSONArray(\"list2\");\r\n\r\n        ListNode l1 = null;\r\n        for (int i = list1Json.length() - 1; i >= 0; i--) {\r\n            int val = list1Json.getInt(i);\r\n            ListNode temp = new ListNode(val);\r\n            temp.next = l1;\r\n            l1 = temp;\r\n        }\r\n\r\n        ListNode l2 = null;\r\n        for (int i = list2Json.length() - 1; i >= 0; i--) {\r\n            int val = list2Json.getInt(i);\r\n            ListNode temp = new ListNode(val);\r\n            temp.next = l2;\r\n            l2 = temp;\r\n        }\r\n\r\n        ListNode mergedList = mergeTwoLists(l1, l2);\r\n\r\n        JSONArray resultList = new JSONArray();\r\n        ListNode current = mergedList;\r\n        while (current != null) {\r\n            resultList.put(current.val);\r\n            current = current.next;\r\n        }\r\n\r\n        System.out.println(resultList.toString());\r\n    }\r\n}\r\n'),
(45, 9, 'JavaScript', 'class ListNode {\r\n    constructor(val, next = null) {\r\n        this.val = val;\r\n        this.next = next;\r\n    }\r\n}\r\n\r\nfunction mergeTwoLists(l1, l2) {\r\n    // your code here\r\n    return null;\r\n}\r\n\r\nconst data = JSON.parse(process.argv[2]);\r\n\r\nconst list1_json = data.list1;\r\nconst list2_json = data.list2;\r\n\r\nlet l1 = null;\r\nfor (const val of list1_json.reverse()) {\r\n    const temp = new ListNode(val);\r\n    temp.next = l1;\r\n    l1 = temp;\r\n}\r\n\r\nlet l2 = null;\r\nfor (const val of\r\n'),
(46, 10, 'C', '#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <string.h>\r\n#include <json-c/json.h>\r\n\r\nchar* longestCommonPrefix(char** strs, int strsSize) {\r\n    // code here\r\n    return NULL;\r\n}\r\n\r\nint main(int argc, char* argv[]) {\r\n    if (argc != 2) {\r\n        fprintf(stderr, \"Usage: %s \'<json_data>\'\\n\", argv[0]);\r\n        return 1;\r\n    }\r\n\r\n    char* json_data = argv[1];\r\n\r\n    struct json_object *parsed_json;\r\n    struct json_object *strs_json;\r\n\r\n    parsed_json = json_tokener_parse(json_data);\r\n    strs_json = json_object_object_get(parsed_json, \"strs\");\r\n\r\n    int strsSize = json_object_array_length(strs_json);\r\n    char* strs[strsSize];\r\n    for (int i = 0; i < strsSize; ++i) {\r\n        strs[i] = strdup(json_object_get_string(json_object_array_get_idx(strs_json, i)));\r\n    }\r\n\r\n    char* prefix = longestCommonPrefix(strs, strsSize);\r\n\r\n    struct json_object* result_json = json_object_new_object();\r\n    json_object_object_add(result_json, \"longestCommonPrefix\", json_object_new_string(prefix));\r\n    printf(\"%s\\n\", json_object_to_json_string(result_json));\r\n\r\n    // Free the allocated memory\r\n    for (int i = 0; i < strsSize; ++i) {\r\n        free(strs[i]);\r\n    }\r\n    free(prefix);\r\n    json_object_put(result_json);\r\n    json_object_put(parsed_json);\r\n\r\n    return 0;\r\n}\r\n'),
(47, 10, 'PHP', '<?php\r\nfunction longestCommonPrefix($strs) {\r\n    // code here\r\n    return \"\";\r\n}\r\n\r\nif ($argc != 2) {\r\n    fwrite(STDERR, \"Usage: php \" . $argv[0] . \" \'<json_data>\'\\n\");\r\n    exit(1);\r\n}\r\n\r\n$json_data = json_decode($argv[1], true);\r\n\r\n$strs = $json_data[\'strs\'];\r\n\r\n$prefix = longestCommonPrefix($strs);\r\n\r\necho json_encode([\"longestCommonPrefix\" => $prefix]) . \"\\n\";\r\n?>\r\n'),
(48, 10, 'Python', 'import json\r\nimport sys\r\n\r\ndef longestCommonPrefix(strs):\r\n    # code here\r\n    return \"\"\r\n\r\nif len(sys.argv) != 2:\r\n    print(f\"Usage: {sys.argv[0]} \'<json_data>\'\", file=sys.stderr)\r\n    sys.exit(1)\r\n\r\njson_data = json.loads(sys.argv[1])\r\n\r\nstrs = json_data[\'strs\']\r\n\r\nprefix = longestCommonPrefix(strs)\r\n\r\nprint(json.dumps({\"longestCommonPrefix\": prefix}))\r\n'),
(49, 10, 'Java', 'import org.json.JSONArray;\r\nimport org.json.JSONObject;\r\n\r\npublic class LongestCommonPrefix {\r\n    public static String longestCommonPrefix(String[] strs) {\r\n        // code here\r\n        return \"\";\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        if (args.length != 1) {\r\n            System.err.println(\"Usage: java LongestCommonPrefix \'<json_data>\'\");\r\n            System.exit(1);\r\n        }\r\n\r\n        JSONObject jsonData = new JSONObject(args[0]);\r\n        JSONArray strsJson = jsonData.getJSONArray(\"strs\");\r\n\r\n        String[] strs = new String[strsJson.length()];\r\n        for (int i = 0; i < strsJson.length(); i++) {\r\n            strs[i] = strsJson.getString(i);\r\n        }\r\n\r\n        String prefix = longestCommonPrefix(strs);\r\n\r\n        JSONObject resultJson = new JSONObject();\r\n        resultJson.put(\"longestCommonPrefix\", prefix);\r\n        System.out.println(resultJson.toString());\r\n    }\r\n}\r\n'),
(50, 10, 'JavaScript', 'function longestCommonPrefix(strs) {\r\n    // code here\r\n    return \"\";\r\n}\r\n\r\nconst data = JSON.parse(process.argv[2]);\r\n\r\nconst strs = data.strs;\r\n\r\nconst prefix = longestCommonPrefix(strs);\r\n\r\nconsole.log(JSON.stringify({ longestCommonPrefix: prefix }));\r\n'),
(51, 11, 'C', '#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <stdbool.h>\r\n#include <json-c/json.h>\r\n\r\nbool isValidSudoku(char** board, int boardSize) {\r\n    // your code here\r\n    return false;\r\n}\r\n\r\nint main(int argc, char* argv[]) {\r\n    if (argc != 2) {\r\n        fprintf(stderr, \"Usage: %s \'<json_data>\'\\n\", argv[0]);\r\n        return 1;\r\n    }\r\n\r\n    char* json_data = argv[1];\r\n\r\n    struct json_object *parsed_json;\r\n    struct json_object *board_json;\r\n\r\n    parsed_json = json_tokener_parse(json_data);\r\n    board_json = json_object_object_get(parsed_json, \"board\");\r\n\r\n    int boardSize = 9;\r\n    char* board[boardSize];\r\n    for (int i = 0; i < boardSize; ++i) {\r\n        board[i] = json_object_get_string(json_object_array_get_idx(board_json, i));\r\n    }\r\n\r\n    bool isValid = isValidSudoku(board, boardSize);\r\n\r\n    struct json_object* result_json = json_object_new_object();\r\n    json_object_object_add(result_json, \"isValid\", json_object_new_boolean(isValid));\r\n    printf(\"%s\\n\", json_object_to_json_string(result_json));\r\n\r\n    json_object_put(result_json);  // Free JSON object\r\n    json_object_put(parsed_json);  // Free JSON object\r\n\r\n    return 0;\r\n}\r\n'),
(52, 11, 'PHP', '<?php\r\nfunction isValidSudoku($board) {\r\n    // your code here\r\n    return false;\r\n}\r\n\r\nif ($argc != 2) {\r\n    fwrite(STDERR, \"Usage: php \" . $argv[0] . \" \'<json_data>\'\\n\");\r\n    exit(1);\r\n}\r\n\r\n$json_data = json_decode($argv[1], true);\r\n\r\n$board = $json_data[\'board\'];\r\n\r\n$isValid = isValidSudoku($board);\r\n\r\necho json_encode([\"isValid\" => $isValid]) . \"\\n\";\r\n?>\r\n'),
(53, 11, 'Python', 'import json\r\nimport sys\r\n\r\ndef isValidSudoku(board):\r\n    # your code here\r\n    return False\r\n\r\nif len(sys.argv) != 2:\r\n    print(f\"Usage: {sys.argv[0]} \'<json_data>\'\", file=sys.stderr)\r\n    sys.exit(1)\r\n\r\njson_data = json.loads(sys.argv[1])\r\n\r\nboard = json_data[\'board\']\r\n\r\nisValid = isValidSudoku(board)\r\n\r\nprint(json.dumps({\"isValid\": isValid}))\r\n'),
(54, 11, 'Java', 'import org.json.JSONArray;\r\nimport org.json.JSONObject;\r\n\r\npublic class IsValidSudoku {\r\n    public static boolean isValidSudoku(char[][] board) {\r\n        // your code here\r\n        return false;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        if (args.length != 1) {\r\n            System.err.println(\"Usage: java IsValidSudoku \'<json_data>\'\");\r\n            System.exit(1);\r\n        }\r\n\r\n        JSONObject jsonData = new JSONObject(args[0]);\r\n        JSONArray boardJson = jsonData.getJSONArray(\"board\");\r\n\r\n        char[][] board = new char[9][9];\r\n        for (int i = 0; i < 9; i++) {\r\n            String row = boardJson.getString(i);\r\n            for (int j = 0; j < 9; j++) {\r\n                board[i][j] = row.charAt(j);\r\n            }\r\n        }\r\n\r\n        boolean isValid = isValidSudoku(board);\r\n\r\n        JSONObject resultJson = new JSONObject();\r\n        resultJson.put(\"isValid\", isValid);\r\n        System.out.println(resultJson.toString());\r\n    }\r\n}\r\n'),
(55, 11, 'JavaScript', 'function isValidSudoku(board) {\r\n    // your code here\r\n    return false;\r\n}\r\n\r\nconst data = JSON.parse(process.argv[2]);\r\n\r\nconst board = data.board;\r\n\r\nconst isValid = isValidSudoku(board);\r\n\r\nconsole.log(JSON.stringify({ isValid }));\r\n');

--
-- Constraints for dumped tables
--

--
-- Constraints for table `default_code`
--
ALTER TABLE `default_code`
  ADD CONSTRAINT `default_code_ibfk_1` FOREIGN KEY (`problem_id`) REFERENCES `problem` (`id`);
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
